(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{366:function(t,v,_){"use strict";_.r(v);var s=_(45),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("p",[_("strong",[t._v("HTTP是一种能够获取如HTML这样的网络资源的protocol(通讯协议)。它是在Web上进行数据交换的基础，是一种client-server协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本，布局描述，图片，视频，脚本等等。")])]),t._v(" "),_("p",[t._v("客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。由像浏览器这样的客户端发出的消息叫做"),_("strong",[t._v("requests")]),t._v("，被服务端响应的消息叫做"),_("strong",[t._v("responses")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"基本性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本性质"}},[t._v("#")]),t._v(" 基本性质")]),t._v(" "),_("ol",[_("li",[t._v("HTTP是简单的，大体上被设计得简单易读；")]),t._v(" "),_("li",[t._v("HTTP是可扩展的，可以通过扩展请求头（headers）来扩展新功能；")]),t._v(" "),_("li",[t._v("HTTP是无状态的，有会话的，http本质上是无状态的，使用cookies可以创建有状态的会话；")]),t._v(" "),_("li",[t._v("HTTP能控制以下特性：\n"),_("ul",[_("li",[t._v("缓存")]),t._v(" "),_("li",[t._v("开放同源限制")]),t._v(" "),_("li",[t._v("认证，头信息或者cookies设置指定会话")]),t._v(" "),_("li",[t._v("代理和隧道")]),t._v(" "),_("li",[t._v("会话")])])])]),t._v(" "),_("h2",{attrs:{id:"缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),_("p",[t._v("通过复用以前获取的资源，可以显著提高网站和应用程序的性能。web缓存减少了等待时间和网络流量，因此减少了显示资源表示形式所需的时间。通过使用HTTP缓存，变得更加响应性。")]),t._v(" "),_("p",[t._v("缓存大致分为两类："),_("strong",[t._v("私有与共享缓存")]),t._v("，共享缓存存储的响应能被多个用户使用，私有缓存只能用于单独用户。")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("（私有）浏览器缓存"),_("br"),t._v("\n只能用于单独用户，浏览器设置中的缓存选项就是此作用，浏览器缓存拥有用户通过HTTP下载的所有文档。这些缓存为浏览过的文档提供向前/后导航，保存网页，查看源码等功能，可以避免再次向服务器发起多余请求。同样可以提供缓存内容的离线浏览。")])]),t._v(" "),_("li",[_("p",[t._v("（共享）代理缓存"),_("br"),t._v("\n共享缓存可以被多个用户使用。web代理为本地网络基础的一部分提供给用户。")])])]),t._v(" "),_("h3",{attrs:{id:"缓存操作的目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存操作的目标"}},[t._v("#")]),t._v(" 缓存操作的目标")]),t._v(" "),_("p",[t._v("虽然缓存不是必须的，但是重用缓存的资源通常是必要的。然而常见的HTTP缓存只能存储"),_("strong",[t._v("GET")]),t._v("响应，对于其他类型的响应则无能为力。缓存的关键只要包括"),_("strong",[t._v("request method")]),t._v("和"),_("strong",[t._v("目标URL")]),t._v("（一般只有GET请求才会被缓存）")]),t._v(" "),_("h3",{attrs:{id:"缓存控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存控制"}},[t._v("#")]),t._v(" 缓存控制")]),t._v(" "),_("h4",{attrs:{id:"cache-control-头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-头"}},[t._v("#")]),t._v(" Cache-control 头")]),t._v(" "),_("ol",[_("li",[t._v("没有缓存：Cache-Control：no-store")]),t._v(" "),_("li",[t._v("缓存但重新验证：Cache-Control：no-cache")]),t._v(" "),_("li",[t._v("私有和公共缓存：Cache-Control：private/Cache-Control：public")]),t._v(" "),_("li",[t._v("过期：Cache-Control：max-age=seconds // 能缓存的最大时间")])]),t._v(" "),_("h4",{attrs:{id:"新鲜度-如何判断缓存是否是最新的-如何清除缓存-新版本发布-用户浏览器的缓存如何更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新鲜度-如何判断缓存是否是最新的-如何清除缓存-新版本发布-用户浏览器的缓存如何更新"}},[t._v("#")]),t._v(" 新鲜度（如何判断缓存是否是最新的，如何清除缓存，新版本发布，用户浏览器的缓存如何更新）")]),t._v(" "),_("ol",[_("li",[t._v("缓存会定期清除，这个过程叫做缓存驱逐")]),t._v(" "),_("li",[t._v("当客户端发起一个请求，缓存检索到一个旧资源，会将此请求附加一个If-None-Match头，以此来判断缓存是否是最新的，若服务器返回304则是最新的，否则该请求带回新的资源实体内容返回。")])]),t._v(" "),_("h2",{attrs:{id:"cookies"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookies"}},[t._v("#")]),t._v(" Cookies")]),t._v(" "),_("p",[t._v("\b是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发送请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户登录状态。主要用于以下三个方面：")]),t._v(" "),_("ol",[_("li",[t._v("会话状态管理（登录状态，购物车，游戏分数等需要记录的信息）；")]),t._v(" "),_("li",[t._v("个性化设置（用户自定义设置，主题等）；")]),t._v(" "),_("li",[t._v("浏览器行为跟踪（跟踪分析用户行为等）")])]),t._v(" "),_("h3",{attrs:{id:"创建cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建cookie"}},[t._v("#")]),t._v(" 创建Cookie")]),t._v(" "),_("p",[t._v("当服务器收到HTTP请求时，服务器可以在响应头里面添加一个Set-Cookie选项，浏览器收到后通常会保存下Cookie，之后对于该服务器的每一次请求都通过Cookie请求头部将Cookie信息发送给服务器。")]),t._v(" "),_("h2",{attrs:{id:"跨源资源共享-cors"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨源资源共享-cors"}},[t._v("#")]),t._v(" 跨源资源共享（CORS）")]),t._v(" "),_("p",[t._v("是一种基于HTTP头的机制，该机制通过允许服务器标示除了它自己以外的其他origin（域，协议和端口），这样浏览器可以访问加载这些资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起的一个到服务器托管的跨源资源的‘预检’请求。在预检中，浏览器发送的头中标示有HTTP方法和真实请求中会用到的头。")]),t._v(" "),_("h3",{attrs:{id:"若干访问控制场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#若干访问控制场景"}},[t._v("#")]),t._v(" 若干访问控制场景")]),t._v(" "),_("ol",[_("li",[t._v("简单请求")]),t._v(" "),_("li",[t._v("预检请求")]),t._v(" "),_("li",[t._v("附带身份凭证的请求")])]),t._v(" "),_("h3",{attrs:{id:"http响应首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http响应首部字段"}},[t._v("#")]),t._v(" HTTP响应首部字段")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("Access-Control-Allow-Origin：origin/*")]),t._v(" "),_("p",[t._v("允许哪些域的请求，*表示允许所有域")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Expose-Headers：x-my-custom-Header")]),t._v(" "),_("p",[t._v("设置浏览器允许通过特定API访问这些响应头")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Max-Age:seconds")]),t._v(" "),_("p",[t._v("指定preflight请求的结果能被缓存多久")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Allow-Credentials:true")]),t._v(" "),_("p",[t._v("指定当浏览器设置为true时，是否允许浏览器读取response的内容")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Allow-Method：POST")]),t._v(" "),_("p",[t._v("用于预检请求的响应，指明了实际请求所允许使用的请求方法")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Allow-Headers：字段名")]),t._v(" "),_("p",[t._v("用于预检请求的响应，指明了实际请求中允许携带的头部字段")])])]),t._v(" "),_("h3",{attrs:{id:"http请求首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http请求首部字段"}},[t._v("#")]),t._v(" HTTP请求首部字段")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("Origin：域名")]),t._v(" "),_("p",[t._v("表明预检或者实际请求中的源站URL，只是服务器名称")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Request-Method：HTTP方法")]),t._v(" "),_("p",[t._v("用于预检请求，将实际请求所使用的http方法告诉服务器")])]),t._v(" "),_("li",[_("p",[t._v("Access-Control-Request-Headers：字段名")]),t._v(" "),_("p",[t._v("用于预检请求，将实际请求中所携带的头信息告诉服务器")])])]),t._v(" "),_("h2",{attrs:{id:"headers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#headers"}},[t._v("#")]),t._v(" Headers")]),t._v(" "),_("p",[t._v("消息头允许客户端和服务器通过"),_("strong",[t._v("request")]),t._v("和"),_("strong",[t._v("response")]),t._v("传递附加信息。一个请求头由名称（不区分大小写）后跟一个冒号：，冒号后跟具体值（不支持换行符）组成。")]),t._v(" "),_("p",[t._v("自定义专用请求头可通过‘X-’前缀来添加")])])}),[],!1,null,null,null);v.default=e.exports}}]);